buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath files('gradle/gradle-witness.jar')
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.14.0'
    }
}

apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'witness'
apply plugin: 'com.github.ben-manes.versions'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
}

ext {
    guavaVersion = '22.0'
    bouncyCastleVersion = '1.57'
    gsonVersion = '2.8.0'
    groovyVersion = '2.4.7'
    commonsLangVersion = '3.5'
    slf4jVersion = '1.7.25'
    openUtilsVersion = '1.0'
    jcommandsVersion = '1.3'
    mapdbVersion = '3.0.4'
    nd4jVersion = '0.8.0'
    commonsnetVersion = '3.6'
    joolVersion = '0.9.12'
    xodusVersion = '1.0.5'

    //test libraries
    assertjVersion = '3.8.0'
    assertjSwingVersion = '3.4.0'
    testngVersion = '6.11'
    mockitoCoreVersion = '2.+'
    slf4jSimpleVersion = '1.7.25'
    datafactoryVersion = '0.8'
}

dependencies {
    compile "com.google.guava:guava:$guavaVersion"
    compile "com.google.code.gson:gson:$gsonVersion"
    compile "org.bouncycastle:bcprov-jdk15on:$bouncyCastleVersion"
    compile "org.apache.commons:commons-lang3:$commonsLangVersion"
    compile "org.slf4j:slf4j-api:$slf4jVersion"
    compile "ru.opensecreto:openutils:$openUtilsVersion"
    compile "ru.opensecreto:jcommands:$jcommandsVersion"
    compile "org.mapdb:mapdb:$mapdbVersion"
    compile "org.nd4j:nd4j-common:$nd4jVersion"
    compile "commons-net:commons-net:$commonsnetVersion"
    compile "org.jooq:jool:$joolVersion"
    compile "org.jetbrains.xodus:xodus-openAPI:$xodusVersion"
    compile "org.jetbrains.xodus:xodus-environment:$xodusVersion"
    compile "org.jetbrains.xodus:xodus-entity-store:$xodusVersion"

    testCompile "org.assertj:assertj-core:$assertjVersion"
    testCompile "org.testng:testng:$testngVersion"
    testCompile "org.mockito:mockito-core:$mockitoCoreVersion"
    testCompile "org.slf4j:slf4j-simple:$slf4jSimpleVersion"
    testCompile "org.fluttercode.datafactory:datafactory:$datafactoryVersion"
}

test {
    useTestNG()
    workingDir = "$buildDir"
    systemProperty 'org.slf4j.simpleLogger.defaultLogLevel', 'trace'
}

tasks.withType(Test) {
    int time = 0
    afterTest { desc, result ->
        time += result.getEndTime() - result.getStartTime()
    }

    testLogging {
        // set options for log level LIFECYCLE
        events "passed", "skipped", "failed", "standardOut", "standardError"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)" +
                        " Time: " + time / 1000 + "secs "
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

jar {
    dependsOn classes
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from { configurations.compile.collect { zipTree(it) } }

    manifest {
        attributes 'Main-Class': 'ru.opensecreto.sigmacoin.Main'
    }
}

task runJar(dependsOn: jar, type: JavaExec) {
    workingDir = "$buildDir"
    main '-jar'
    if (project.hasProperty('case')) {
        args = ["$buildDir/libs/sandbox.jar",
                project.property('case')]
    }
}
