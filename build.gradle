apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'jacoco'

repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    maven { url "https://jitpack.io" }
    maven { url "http://dl.bintray.com/typesafe/maven-releases" }
}

configurations { codacy }
dependencies {
    testCompile 'org.assertj:assertj-core:3.5.2'
    testCompile 'org.testng:testng:6.9.12'

    codacy 'com.github.codacy:codacy-coverage-reporter:-SNAPSHOT'
}

jacocoTestReport.dependsOn.add(test)
jacocoTestReport.reports.xml.enabled = true
task coverage {}
coverage.dependsOn.add(jacocoTestReport)

test.useTestNG()
task prepareTestWorkingDir {
    File outputDir = new File("$buildDir/test-output")
    if (!outputDir.exists()) {
        outputDir.mkdirs();
    } else {
        GFileUtils.cleanDirectory(outputDir)
    }
    test.workingDir = outputDir
}
test.dependsOn.add(prepareTestWorkingDir)

tasks.withType(Test) {
    int time = 0;
    afterTest { desc, result ->
        time += result.getEndTime() - result.getStartTime()
    }

    testLogging {
        // set options for log level LIFECYCLE
        events "passed", "skipped", "failed", "standardOut"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)" +
                        " Time: " + time / 1000 + "secs "
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

task sendCoverageToCodacy(type: JavaExec, dependsOn: coverage) {
    main = "com.codacy.CodacyCoverageReporter"
    classpath = configurations.codacy
    args = [
            "-l",
            "Java",
            "-r",
            "${buildDir}\\reports\\jacoco\\jacocoTestReport.xml"
    ]
}

