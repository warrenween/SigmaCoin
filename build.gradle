buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath files('gradle/gradle-witness.jar')
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.14.0'
    }
}

apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'witness'
apply plugin: 'com.github.ben-manes.versions'

repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
}

ext {
    guavaVersion = '21.0'
    bouncyCastleVersion = '1.56'
    gsonVersion = '2.8.0'
    groovyVersion = '2.4.7'
    commonsLangVersion = '3.5'
    slf4jVersion = '1.7.25'
    openUtilsVersion = '1.0'
    jcommandsVersion = '1.3'
    mapdbVersion = '3.0.3'
    nd4jVersion = '0.8.0'
    commonsnetVersion= '3.6'

    //test libraries
    assertjVersion = '3.6.2'
    assertjSwingVersion = '3.4.0'
    testngVersion = '6.11'
    mockitoCoreVersion = '2.+'
    slf4jSimpleVersion = '1.7.25'
    datafactoryVersion = '0.8'
}

dependencies {
    compile "com.google.guava:guava:$guavaVersion"
    compile "com.google.code.gson:gson:$gsonVersion"
    compile "org.bouncycastle:bcprov-jdk15on:$bouncyCastleVersion"
    compile "org.apache.commons:commons-lang3:$commonsLangVersion"
    compile "org.slf4j:slf4j-api:$slf4jVersion"
    compile "ru.opensecreto:openutils:$openUtilsVersion"
    compile "ru.opensecreto:jcommands:$jcommandsVersion"
    compile "org.mapdb:mapdb:$mapdbVersion"
    compile "org.nd4j:nd4j-common:$nd4jVersion"
    compile "commons-net:commons-net:$commonsnetVersion"

    testCompile "org.assertj:assertj-core:$assertjVersion"
    testCompile "org.testng:testng:$testngVersion"
    testCompile "org.mockito:mockito-core:$mockitoCoreVersion"
    testCompile "org.slf4j:slf4j-simple:$slf4jSimpleVersion"
    testCompile "org.fluttercode.datafactory:datafactory:$datafactoryVersion"
}

dependencyVerification {
    verify = [
            'com.google.guava:guava:972139718abc8a4893fa78cba8cf7b2c903f35c97aaf44fa3031b0669948b480',
            'com.google.code.gson:gson:c6221763bd79c4f1c3dc7f750b5f29a0bb38b367b81314c4f71896e340c40825',
            'org.bouncycastle:bcprov-jdk15on:963e1ee14f808ffb99897d848ddcdb28fa91ddda867eb18d303e82728f878349',
            'org.apache.commons:commons-lang3:8ac96fc686512d777fca85e144f196cd7cfe0c0aec23127229497d1a38ff651c',
            'org.slf4j:slf4j-api:18c4a0095d5c1da6b817592e767bb23d29dd2f560ad74df75ff3961dbde25b79',
            'ru.opensecreto:openutils:f7c9b91230ddec9ecf294679638f32165fea2495b8e99e6d53d69ee02341ba50',
            'ru.opensecreto:jcommands:33af79aab5d3a1d11f4715fb5f22bf7a1dabd45767420dff5e47d288279216e4',
            'org.mapdb:mapdb:2ef42b8c768051646fa230e3c5b8e2eec0ab8c228c193bcbc5c0aac8a8c678d2',
            'org.jetbrains.kotlin:kotlin-stdlib:38dd8d4e1bbff75e67d16b78d6fde1d55a7720172f099ea95135f2ec7996b11f',
            'org.eclipse.collections:eclipse-collections-api:8ed2ad5aeba56b4331f9bc561b0cc1cef9e5175a070fb37160e6dac958b017a0',
            'org.eclipse.collections:eclipse-collections:7ee31f16a8c665c751d231620e0b7e17a56dee8398443dfb5f5af762b58faac8',
            'org.eclipse.collections:eclipse-collections-forkjoin:d3d6346dd988906fd50864152c51ca01d8ee5ddf88e66c6809acc052ce6f23b4',
            'net.jpountz.lz4:lz4:b877a4d4a3a0140486d3d0f83d9058e7c0ff6ca80b00d2f7b77145935b385b56',
            'org.mapdb:elsa:c84f01440b506ae1ce69ee4f69d887ce2009b9e86b696be1c50774ca1f2b359a',
            'org.jetbrains.kotlin:kotlin-runtime:59dcf4c5fb74f95b7c9405330b5b7f9d74dfef012bc11a9d51d6e0415e639b51',
            'net.jcip:jcip-annotations:be5805392060c71474bf6c9a67a099471274d30b83eef84bfc4e0889a4f1dcc0',
    ]
}

test {
    useTestNG()
    workingDir = "$buildDir"
    systemProperty 'org.slf4j.simpleLogger.defaultLogLevel', 'trace'
}

tasks.withType(Test) {
    int time = 0
    afterTest { desc, result ->
        time += result.getEndTime() - result.getStartTime()
    }

    testLogging {
        // set options for log level LIFECYCLE
        events "passed", "skipped", "failed", "standardOut", "standardError"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)" +
                        " Time: " + time / 1000 + "secs "
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

jar {
    dependsOn classes
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from { configurations.compile.collect { zipTree(it) } }

    manifest {
        attributes 'Main-Class': 'ru.opensecreto.sigmacoin.Main'
    }
}

task runJar(dependsOn: jar, type: JavaExec) {
    workingDir = "$buildDir"
    main '-jar'
    if (project.hasProperty('case')) {
        args = ["$buildDir/libs/sandbox.jar",
                project.property('case')]
    }
}
