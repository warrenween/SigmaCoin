allprojects {
    apply plugin: 'jacoco'

    ext {
        guavaVersion = '19.0'
        bouncyCastleVersion = '1.55'
        gsonVersion = '2.8.0'
        groovyVersion = '2.4.7'

        //coretest libraries
        assertjVersion = '3.5.2'
        assertjSwingVersion = '3.4.0'
        testngVersion = '6.9.12'
    }

    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url "https://jitpack.io" }
        maven { url "http://dl.bintray.com/typesafe/maven-releases" }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'

    task coverage(type: JacocoReport) {
        dependsOn test
    }

    test.useTestNG()
    task prepareTestWorkingDir {
        File outputDir = new File("$buildDir/coretest-output")
        if (!outputDir.exists()) {
            outputDir.mkdirs();
        } else {
            GFileUtils.cleanDirectory(outputDir)
        }
        test.workingDir = outputDir
    }
    test.dependsOn.add(prepareTestWorkingDir)

    tasks.withType(Test) {
        int time = 0;
        afterTest { desc, result ->
            time += result.getEndTime() - result.getStartTime()
        }

        testLogging {
            // set options for log level LIFECYCLE
            events "passed", "skipped", "failed", "standardOut"
            showExceptions true
            exceptionFormat "full"
            showCauses true
            showStackTraces true

            // set options for log level DEBUG and INFO
            debug {
                events "started", "passed", "skipped", "failed", "standardOut", "standardError"
                exceptionFormat "full"
            }
            info.events = debug.events
            info.exceptionFormat = debug.exceptionFormat

            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)" +
                            " Time: " + time / 1000 + "secs "
                    def startItem = '|  ', endItem = '  |'
                    def repeatLength = startItem.length() + output.length() + endItem.length()
                    println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
                }
            }
        }
    }

}

apply plugin: 'eclipse'
apply plugin: 'idea'

task jacocoMerge(type: JacocoMerge) {
    executionData project(':core').test, project(':desktopguitest').test
}

task coverage(type: JacocoReport) {
    onlyIf { true }
    dependsOn jacocoMerge
    reports.xml.enabled true
}

configurations { codacy }
dependencies {
    codacy 'com.github.codacy:codacy-coverage-reporter:-SNAPSHOT'
}
task sendCoverageToCodacy(type: JavaExec) {
    dependsOn coverage
    main = "com.codacy.CodacyCoverageReporter"
    classpath = configurations.codacy
    args = [
            "-l",
            "Java",
            "-r",
            "${buildDir}/reports/jacoco/coretest/jacocoTestReport.xml"
    ]
}
