buildscript {
    dependencies {
        classpath files('gradle/gradle-witness.jar')
    }
}

apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'witness'

repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
}

ext {
    guavaVersion = '19.0'
    bouncyCastleVersion = '1.55'
    gsonVersion = '2.8.0'
    groovyVersion = '2.4.7'
    commonsLangVersion = '3.5'
    slf4jVersion = '1.7.24'
    openUtilsVersion = '1.0'
    jcommandsVersion = '1.3'
    mapdbVersion = '3.0.3'

    //test libraries
    assertjVersion = '3.5.2'
    assertjSwingVersion = '3.4.0'
    testngVersion = '6.9.12'
    mockitoCoreVersion = '2.+'
    slf4jSimpleVersion = '1.7.24'
    datafactoryVersion = '0.8'
}

dependencies {
    compile "com.google.guava:guava:$guavaVersion"
    compile "com.google.code.gson:gson:$gsonVersion"
    compile "org.codehaus.groovy:groovy-all:$groovyVersion"
    compile "org.bouncycastle:bcprov-jdk15on:$bouncyCastleVersion"
    compile "org.apache.commons:commons-lang3:$commonsLangVersion"
    compile "org.slf4j:slf4j-api:$slf4jVersion"
    compile "ru.opensecreto:openutils:$openUtilsVersion"
    compile "ru.opensecreto:jcommands:$jcommandsVersion"
    compile "org.mapdb:mapdb:$mapdbVersion"

    testCompile "org.assertj:assertj-core:$assertjVersion"
    testCompile "org.testng:testng:$testngVersion"
    testCompile "org.mockito:mockito-core:$mockitoCoreVersion"
    testCompile "org.slf4j:slf4j-simple:$slf4jSimpleVersion"
    testCompile "org.fluttercode.datafactory:datafactory:$datafactoryVersion"
}

dependencyVerification {
    verify = [
            'com.google.guava:guava:58d4cc2e05ebb012bbac568b032f75623be1cb6fb096f3c60c72a86f7f057de4',
            'com.google.code.gson:gson:c6221763bd79c4f1c3dc7f750b5f29a0bb38b367b81314c4f71896e340c40825',
            'org.codehaus.groovy:groovy-all:688f42c55454bf48ff0f293cc6320ed703c0c861c8e5d903c35d3b3f85b0029e',
            'org.bouncycastle:bcprov-jdk15on:c08450a176b55c7ef4847111550eb247e5912ad450c8c225fa2f7cab74ce608b',
            'org.apache.commons:commons-lang3:8ac96fc686512d777fca85e144f196cd7cfe0c0aec23127229497d1a38ff651c',
            'org.slf4j:slf4j-api:baf3c7fe15fefeaf9e5b000d94547379dc48370f22a8797e239c127e7d7756ec',
            'ru.opensecreto:openutils:f7c9b91230ddec9ecf294679638f32165fea2495b8e99e6d53d69ee02341ba50',
            'ru.opensecreto:jcommands:33af79aab5d3a1d11f4715fb5f22bf7a1dabd45767420dff5e47d288279216e4',
    ]
}

test.useTestNG()
test.workingDir = "$buildDir"

tasks.withType(Test) {
    int time = 0;
    afterTest { desc, result ->
        time += result.getEndTime() - result.getStartTime()
    }

    testLogging {
        // set options for log level LIFECYCLE
        events "passed", "skipped", "failed", "standardOut"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)" +
                        " Time: " + time / 1000 + "secs "
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

jar {
    dependsOn classes
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from { configurations.compile.collect { zipTree(it) } }

    manifest {
        attributes 'Main-Class': 'ru.opensecreto.sigmacoin.Main'
    }
}

task runJar(dependsOn: jar, type: JavaExec) {
    workingDir = "$buildDir"
    main '-jar'
    if (project.hasProperty('case')) {
        args = ["$buildDir/libs/sandbox.jar",
                project.property('case')]
    }
}
