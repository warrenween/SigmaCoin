apply plugin: 'eclipse'
apply plugin: 'idea'

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'

    ext {
        guavaVersion = '19.0'
        bouncyCastleVersion = '1.55'
        gsonVersion = '2.8.0'

        //test libraries
        assertjVersion = '3.5.2'
        assertjSwingVersion = '3.4.0'
        testngVersion = '6.9.12'
    }

    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url "https://jitpack.io" }
    }

    task coverage {}
    jacocoTestReport.dependsOn.add(test)
    coverage.dependsOn.add(jacocoTestReport)

    test.useTestNG()
    test.outputs.upToDateWhen { false }
    task prepareTestWorkingDir {
        File outputDir = new File("$buildDir/test-output")
        if (!outputDir.exists()) {
            outputDir.mkdirs();
        } else {
            GFileUtils.cleanDirectory(outputDir)
        }
        test.workingDir = outputDir
    }
    test.dependsOn.add(prepareTestWorkingDir)

    tasks.withType(Test) {
        int time = 0;
        afterTest { desc, result ->
            time += result.getEndTime() - result.getStartTime()
        }

        testLogging {
            // set options for log level LIFECYCLE
            events "passed", "skipped", "failed", "standardOut"
            showExceptions true
            exceptionFormat "full"
            showCauses true
            showStackTraces true

            // set options for log level DEBUG and INFO
            debug {
                events "started", "passed", "skipped", "failed", "standardOut", "standardError"
                exceptionFormat "full"
            }
            info.events = debug.events
            info.exceptionFormat = debug.exceptionFormat

            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)" +
                            " Time: " + time / 1000 + "secs "
                    def startItem = '|  ', endItem = '  |'
                    def repeatLength = startItem.length() + output.length() + endItem.length()
                    println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
                }
            }
        }
    }

}
